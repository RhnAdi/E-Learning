// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/classroom_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassroomServiceClient is the client API for ClassroomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassroomServiceClient interface {
	// For Teacher
	CreateClassroom(ctx context.Context, in *CreateClassroomRequest, opts ...grpc.CallOption) (*ClassroomResponse, error)
	UpdateClassroom(ctx context.Context, in *UpdateClassroomRequest, opts ...grpc.CallOption) (*ClassroomResponse, error)
	DeleteClassroom(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ClassroomResponse, error)
	GetAllJoinRequest(ctx context.Context, in *Id, opts ...grpc.CallOption) (*JoinClassRequestsResponse, error)
	AcceptJoinRequest(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentClassResponse, error)
	RejectJoinRequest(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentClassResponse, error)
	// For Student
	JoinClass(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentClassResponse, error)
	// For Teacher & Student
	MyClass(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListClassroomResponse, error)
	GetStudentInfo(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentClassResponse, error)
	// For All
	GetAllClassroom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListClassroomResponse, error)
	GetClassroomById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ClassroomResponse, error)
	GetClassroomByName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*ClassroomResponse, error)
	GetAllStudents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentsResponse, error)
}

type classroomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassroomServiceClient(cc grpc.ClientConnInterface) ClassroomServiceClient {
	return &classroomServiceClient{cc}
}

func (c *classroomServiceClient) CreateClassroom(ctx context.Context, in *CreateClassroomRequest, opts ...grpc.CallOption) (*ClassroomResponse, error) {
	out := new(ClassroomResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/CreateClassroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) UpdateClassroom(ctx context.Context, in *UpdateClassroomRequest, opts ...grpc.CallOption) (*ClassroomResponse, error) {
	out := new(ClassroomResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/UpdateClassroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) DeleteClassroom(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ClassroomResponse, error) {
	out := new(ClassroomResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/DeleteClassroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) GetAllJoinRequest(ctx context.Context, in *Id, opts ...grpc.CallOption) (*JoinClassRequestsResponse, error) {
	out := new(JoinClassRequestsResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/GetAllJoinRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) AcceptJoinRequest(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentClassResponse, error) {
	out := new(StudentClassResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/AcceptJoinRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) RejectJoinRequest(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentClassResponse, error) {
	out := new(StudentClassResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/RejectJoinRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) JoinClass(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentClassResponse, error) {
	out := new(StudentClassResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/JoinClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) MyClass(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListClassroomResponse, error) {
	out := new(ListClassroomResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/MyClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) GetStudentInfo(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentClassResponse, error) {
	out := new(StudentClassResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/GetStudentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) GetAllClassroom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListClassroomResponse, error) {
	out := new(ListClassroomResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/GetAllClassroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) GetClassroomById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ClassroomResponse, error) {
	out := new(ClassroomResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/GetClassroomById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) GetClassroomByName(ctx context.Context, in *Name, opts ...grpc.CallOption) (*ClassroomResponse, error) {
	out := new(ClassroomResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/GetClassroomByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classroomServiceClient) GetAllStudents(ctx context.Context, in *Id, opts ...grpc.CallOption) (*StudentsResponse, error) {
	out := new(StudentsResponse)
	err := c.cc.Invoke(ctx, "/Classroom.ClassroomService/GetAllStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassroomServiceServer is the server API for ClassroomService service.
// All implementations must embed UnimplementedClassroomServiceServer
// for forward compatibility
type ClassroomServiceServer interface {
	// For Teacher
	CreateClassroom(context.Context, *CreateClassroomRequest) (*ClassroomResponse, error)
	UpdateClassroom(context.Context, *UpdateClassroomRequest) (*ClassroomResponse, error)
	DeleteClassroom(context.Context, *Id) (*ClassroomResponse, error)
	GetAllJoinRequest(context.Context, *Id) (*JoinClassRequestsResponse, error)
	AcceptJoinRequest(context.Context, *Id) (*StudentClassResponse, error)
	RejectJoinRequest(context.Context, *Id) (*StudentClassResponse, error)
	// For Student
	JoinClass(context.Context, *Id) (*StudentClassResponse, error)
	// For Teacher & Student
	MyClass(context.Context, *Empty) (*ListClassroomResponse, error)
	GetStudentInfo(context.Context, *Id) (*StudentClassResponse, error)
	// For All
	GetAllClassroom(context.Context, *Empty) (*ListClassroomResponse, error)
	GetClassroomById(context.Context, *Id) (*ClassroomResponse, error)
	GetClassroomByName(context.Context, *Name) (*ClassroomResponse, error)
	GetAllStudents(context.Context, *Id) (*StudentsResponse, error)
	mustEmbedUnimplementedClassroomServiceServer()
}

// UnimplementedClassroomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClassroomServiceServer struct {
}

func (UnimplementedClassroomServiceServer) CreateClassroom(context.Context, *CreateClassroomRequest) (*ClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClassroom not implemented")
}
func (UnimplementedClassroomServiceServer) UpdateClassroom(context.Context, *UpdateClassroomRequest) (*ClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassroom not implemented")
}
func (UnimplementedClassroomServiceServer) DeleteClassroom(context.Context, *Id) (*ClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassroom not implemented")
}
func (UnimplementedClassroomServiceServer) GetAllJoinRequest(context.Context, *Id) (*JoinClassRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllJoinRequest not implemented")
}
func (UnimplementedClassroomServiceServer) AcceptJoinRequest(context.Context, *Id) (*StudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptJoinRequest not implemented")
}
func (UnimplementedClassroomServiceServer) RejectJoinRequest(context.Context, *Id) (*StudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectJoinRequest not implemented")
}
func (UnimplementedClassroomServiceServer) JoinClass(context.Context, *Id) (*StudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinClass not implemented")
}
func (UnimplementedClassroomServiceServer) MyClass(context.Context, *Empty) (*ListClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyClass not implemented")
}
func (UnimplementedClassroomServiceServer) GetStudentInfo(context.Context, *Id) (*StudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentInfo not implemented")
}
func (UnimplementedClassroomServiceServer) GetAllClassroom(context.Context, *Empty) (*ListClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClassroom not implemented")
}
func (UnimplementedClassroomServiceServer) GetClassroomById(context.Context, *Id) (*ClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassroomById not implemented")
}
func (UnimplementedClassroomServiceServer) GetClassroomByName(context.Context, *Name) (*ClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassroomByName not implemented")
}
func (UnimplementedClassroomServiceServer) GetAllStudents(context.Context, *Id) (*StudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudents not implemented")
}
func (UnimplementedClassroomServiceServer) mustEmbedUnimplementedClassroomServiceServer() {}

// UnsafeClassroomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassroomServiceServer will
// result in compilation errors.
type UnsafeClassroomServiceServer interface {
	mustEmbedUnimplementedClassroomServiceServer()
}

func RegisterClassroomServiceServer(s grpc.ServiceRegistrar, srv ClassroomServiceServer) {
	s.RegisterService(&ClassroomService_ServiceDesc, srv)
}

func _ClassroomService_CreateClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).CreateClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/CreateClassroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).CreateClassroom(ctx, req.(*CreateClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_UpdateClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).UpdateClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/UpdateClassroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).UpdateClassroom(ctx, req.(*UpdateClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_DeleteClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).DeleteClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/DeleteClassroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).DeleteClassroom(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_GetAllJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).GetAllJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/GetAllJoinRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).GetAllJoinRequest(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_AcceptJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).AcceptJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/AcceptJoinRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).AcceptJoinRequest(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_RejectJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).RejectJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/RejectJoinRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).RejectJoinRequest(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_JoinClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).JoinClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/JoinClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).JoinClass(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_MyClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).MyClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/MyClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).MyClass(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_GetStudentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).GetStudentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/GetStudentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).GetStudentInfo(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_GetAllClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).GetAllClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/GetAllClassroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).GetAllClassroom(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_GetClassroomById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).GetClassroomById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/GetClassroomById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).GetClassroomById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_GetClassroomByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).GetClassroomByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/GetClassroomByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).GetClassroomByName(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassroomService_GetAllStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomServiceServer).GetAllStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Classroom.ClassroomService/GetAllStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomServiceServer).GetAllStudents(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassroomService_ServiceDesc is the grpc.ServiceDesc for ClassroomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassroomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Classroom.ClassroomService",
	HandlerType: (*ClassroomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClassroom",
			Handler:    _ClassroomService_CreateClassroom_Handler,
		},
		{
			MethodName: "UpdateClassroom",
			Handler:    _ClassroomService_UpdateClassroom_Handler,
		},
		{
			MethodName: "DeleteClassroom",
			Handler:    _ClassroomService_DeleteClassroom_Handler,
		},
		{
			MethodName: "GetAllJoinRequest",
			Handler:    _ClassroomService_GetAllJoinRequest_Handler,
		},
		{
			MethodName: "AcceptJoinRequest",
			Handler:    _ClassroomService_AcceptJoinRequest_Handler,
		},
		{
			MethodName: "RejectJoinRequest",
			Handler:    _ClassroomService_RejectJoinRequest_Handler,
		},
		{
			MethodName: "JoinClass",
			Handler:    _ClassroomService_JoinClass_Handler,
		},
		{
			MethodName: "MyClass",
			Handler:    _ClassroomService_MyClass_Handler,
		},
		{
			MethodName: "GetStudentInfo",
			Handler:    _ClassroomService_GetStudentInfo_Handler,
		},
		{
			MethodName: "GetAllClassroom",
			Handler:    _ClassroomService_GetAllClassroom_Handler,
		},
		{
			MethodName: "GetClassroomById",
			Handler:    _ClassroomService_GetClassroomById_Handler,
		},
		{
			MethodName: "GetClassroomByName",
			Handler:    _ClassroomService_GetClassroomByName_Handler,
		},
		{
			MethodName: "GetAllStudents",
			Handler:    _ClassroomService_GetAllStudents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/classroom_service.proto",
}
